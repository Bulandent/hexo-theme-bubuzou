script.
    const valineAPI = (() => {
    try {
        AV.init("!{ theme.leancloud.appid }", "!{ theme.leancloud.appkey }");
    } catch(error) {}
    const isExist = (identity) => {
        identity = identity || getRealPath();
        let query = new AV.Query('Timer');
        return new Promise((resolve, reject) => {
        query.equalTo("identity", identity);
        query.find().then(results => {
            resolve(results.length > 0);
        }, error => reject(error));
        })
    }

    const _get = (identity) => {
        let query = null;
        if(identity && identity instanceof Array){
        let querys = [];
        for(let i = 0; i < identity.length; ++i) {
            querys[i] = new AV.Query('Timer');
            querys[i].equalTo('identity', identity[i]);
        }
        query = AV.Query.or.apply(null ,querys);
        } else {
        identity = identity || getRealPath();
        query = new AV.Query("Timer");
        query.equalTo("identity", identity);
        }

        return new Promise((resolve, reject) => {
        query.find()
        .then(results => resolve(results))
        .catch(error => reject(error))
        })
    }

    const create = (identity) => {
        identity = identity || getRealPath();
        return new Promise((resolve, reject) => {
        let Todo = AV.Object.extend('Timer');
        let todo = new Todo();
        todo.set("times", 1);
        todo.set("identity", identity);
        todo.save().then(res => resolve(true), error => reject(error));
        })
    }

    const update = (identity) => {
        identity = identity || getRealPath();
        return new Promise((resolve, reject) => {
        let query = new AV.Query('Timer');
        query.equalTo("identity", identity);
        query.find().then(todos => {
            todos.forEach(todo => {
            todo.set("times", todo.attributes.times + 1);
            });
            return AV.Object.saveAll(todos);
        }).then(todos => resolve(true), error => reject(error));
        })
    }

    return {
        isExist,
        _get,
        update,
        create
    }
    })()

    const calcAndWriteTimes = () => {
    let isPost = !{ is_post() };

    let timerAllDOM = document.querySelectorAll(".article-timer");

    if(isPost) {
        let identity = timerAllDOM[0].getAttribute("data-identity");
        valineAPI.isExist(identity)
        .then(exist => {
        if(exist) {
            return valineAPI.update(identity);
        }
        return new Promise(resolve => resolve(true));
        })
        .then( succuess => valineAPI._get(identity))
        .then( result => timerAllDOM[0].innerText = result[0].attributes.times)
        .catch(error => console.log(error.message))
        return ;
    }

    let timerDOMCache = {};

    for(let timerDOM of timerAllDOM) {
        let identity = timerDOM.getAttribute("data-identity");
        if(timerDOMCache.hasOwnProperty(identity)){
        timerDOMCache[identity].dom.push(timerDOM);
        }else{
        timerDOMCache[identity] = {
            dom: [timerDOM],
            times: undefined
        };
        }
    }

    let identities = Object.keys(timerDOMCache);
    valineAPI._get(identities).then(results => {
        for(let result of results) {
        let {identity, times} = result.attributes;
        timerDOMCache[identity].times = times;
        timerDOMCache[identity].dom.map(item => item.innerText = times);
        }
        for(let identity of identities) {
        if(timerDOMCache[identity].times){
            continue;
        }
        timerDOMCache[identity].dom.map(item => item.innerText = 1);
        valineAPI.create(identity);
        }
    }).catch(error => console.log(error.message))
    }

    if(!{ theme.leancloud.timer }){
    calcAndWriteTimes();
    }